Workout Generation:
1.  Get the user's equipment
2.  Get the user's goal
3.  Get the phases from the goal
4.  Get the user's current phase
    -if phase is None, get the goal's start phase
    -when a phase expires, randomly move on to next phase, but not the visited phases
    -if you're in a phase you've already visited you spend the max possible weeks in phase

Week Creation:
query Frequency by week and fitness level.frequency_for_component = {f.workout_component: f for f in queried_frequencies}

for workout_component in workout_components:
    times_per_week = random from min and max of frequency
    randomly distribute over the course of the week
Days that are completely empty get cardio
Given the week # we're on in phase, get the Cardio volume by fitness level, phase, week
Get the amount of cardio days to create between min and max volume info
Bump up to goal.cardio_type.min_cardio_days

sort the week layout by the number of workout components
fill in cardio by lowest week number.  Account for cardio already added on empty days
randomize cardio by alternate days...see line 4837 (1,3,2,3,1,2, etc)
for each cardio day, the intensity's max of 3 can only be the CardioMax associated with fitness level and goal
if the max # isn't reached, then the maxes get carried over to the medium level
now move down all levels 2's to level 1's if there are too many of those based on the medium level
repeat process again but now just turn cardio off on that day
fill in any unaccounted for days in the week with an off day
Move the off days to match the user's schedule with a series of swapping
Apply HardCodedRules to cardio...holy fuck I don't know what's going on there, see block in line 4990
Iterate over the week.  Every day either needs resistance component or cardio.  Swap out components as necessary
-so if not cardio and not resistance_component, go through cardio days and swap out a resistance with something else it doesnt have.  If no swap exists just add the resistance component
-If a day (ThisWeek) objects consists of nothing but flexibility, remove it
-Spread out cardio days across the week by swapping
-Generate workout for each day, delete previous workouts


Individual workout creation:
-If there's nothing in the framework it's an off day
-Special case muscle endurance
    -mix of hypertrophy and stabilization
-specaise case for power
    -mix of maximal strength and power
-Get the muscle groups used yesterday.  This inscludes an exercise's muscle group and all its helpers
-Get the base queryset of what exercises are available to the user to begin with
-Filter out yesterday muscles
-Filter out by muscle groups in general using MuscleFrequency
-Evenly distribute all of the potential exercises so that every muscle group is just as likely to get hit

for every workout component on that day:
    -Get the appropriate volume for the user, CardioVolume.get_all_volume_info()
    -Ignore flexibility
    -Get the potential exercises for the given workout component
    CURRENTLY ON LINE 120
    for a random number in allowed volume range:
        *Generate an Exercise choice

Generating an exercise choice:
    -*(Use an abstract class with subclasses per phase to account for power and all that)
    -Filter mutually exclusive exercises with currently selected exercises
    -If it's not the first exercise, you select from muscle groups that are related to previous.  Do this until you've reached exhaustion_percent (exhaustion = f(daysPerWeek, phase))
    -potential exercises get filtered by muscle group
    -Series (a group of sets).reps  and sets is randomized by volume info, so is tempo and rest
    -this all gets you to line 187
    -Take today's muscle groups and all of their related muscle groups
    -randomly select an exercise
        -you need at least one compound exercise per muscle group
        -ExercisesPerMuscleGroup table must be honored
        -For power and muscle endurance phase:
            -for first exercise in superset, need a strength type exercise, there's a whole func supersetPossibles to find good ones
            -if phase was muscle endurance or power and workout component was resistance (and exercise was strength_type, whatever the fuck that is), I just alternated the superset flat
        -for resistance and core workout components, the following exercise shoudl be related to current exercise's muscle group if it hasn't met the minimum (ExercisesPerMuscleGroup)

    -after all is done, trim to time, (a whole new deal, based on algorithm see if I can avoid the clipping entirely)
    -group exercises by muscle group if they're not already
    -add flexibility component



