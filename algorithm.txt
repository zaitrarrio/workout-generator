Workout Generation:
1.  Get the user's equipment
2.  Get the user's goal
3.  Get the phases from the goal
4.  Get the user's current phase
    -if phase is None, get the goal's start phase
    -when a phase expires, randomly move on to next phase, but not the visited phases
    -if you're in a phase you've already visited you spend the max possible weeks in phase

Week Creation:
query Frequency by week and fitness level.frequency_for_component = {f.workout_component: f for f in queried_frequencies}

for workout_component in workout_components:
    times_per_week = random from min and max of frequency
    randomly distribute over the course of the week
Given the week # we're on in phase, get the Cardio volume by fitness level, phase, week
Get the amount of cardio days to create between min and max volume info
Bump up to goal.cardio_type.min_cardio_days
randomize cardio by alternate days...see line 4837 (1,3,2,3,1,2, etc)
for each cardio day, the intensity's max of 3 can only be the CardioMax associated with fitness level and goal
if the max # isn't reached, then the maxes get carried over to the medium level
now move down all levels 2's to level 1's if there are too many of those based on the medium level
repeat process again but now just turn cardio off on that day
(did not do)fill in any unaccounted for days in the week with an off day
(did not do)Move the off days to match the user's schedule with a series of swapping
(did not do)Apply HardCodedRules to cardio...holy fuck I don't know what's going on there, see block in line 4990
Iterate over the week.  Every day either needs resistance component or cardio.  Swap out components as necessary
-so if not cardio and not resistance_component, go through cardio days and swap out a resistance with something else it doesnt have.  If no swap exists just add the resistance component
-Spread out cardio days across the week by swapping
-Generate workout for each day, delete previous workouts
-If there's nothing in the framework it's an off day
-Get the muscle groups used yesterday.  This inscludes an exercise's muscle group and all its helpers
-Get the base queryset of what exercises are available to the user to begin with
-Filter out yesterday muscles
-Evenly distribute all of the potential exercises so that every muscle group is just as likely to get hit
-Filter out by muscle groups in general using MuscleFrequency
    -randomly select an exercise
        -you need at least one compound exercise per muscle group
    -Get the appropriate volume for the user, CardioVolume.get_all_volume_info()
    -Get the potential exercises for the given workout component
    -Filter mutually exclusive exercises with currently selected exercises
    -If it's not the first exercise, you select from muscle groups that are related to previous.  Do this until you've reached exhaustion_percent (exhaustion = f(daysPerWeek, phase))
    -potential exercises get filtered by muscle group
    -Series (a group of sets).reps  and sets is randomized by volume info, so is tempo and rest
        -ExercisesPerMuscleGroup table must be honored
        -for resistance and core workout components, the following exercise shoudl be related to current exercise's muscle group if it hasn't met the minimum (ExercisesPerMuscleGroup)
    -Ignore flexibility
for every workout component on that day:
    for a random number in allowed volume range:
        *Generate an Exercise choice
    add flexibility component
    -group exercises by muscle group if they're not already
-Power
    -volume 1 is going to be from maximal strength
    -volume 2 is going to be from power
    (no special cases for tempo)

For resistance component:
    -First exercise is strength type
    -second exercise is power type (and power phase) for power phase
    -second exercise is stabailization type (and Stabilization Phase) for muscle endurance phase
Individual workout creation:
-rest for 45 seconds with every single component except resistance

    -CardioVolume
        -Used for dayframework generation and already done
    -CardioType
        -User settings for how we generate cardio
    -CardioMax
        -has the maximums for setting up the week, already taken care of
    -CardioIntensity__FitnessLevel
        -this is not even in use at all

---SBL EASY PARTS REMAINING
    -after all is done, trim to time, (a whole new deal, based on algorithm see if I can avoid the clipping entirely)

----SBL CURRENTLY RIGHT HERE----
-Muscle endurance
    -volume 1 is going to be from hypertrophy
    -volume 2 is going to be from stabilization
    (need to account for special tempo)
    ^^^^ THATS IT!!!!!

-Need to add cardio

FOR CARDIO
-I have
    -CardioZone
        -min and max heart rates are output to user, adjusted for max heart rate

When reducing cardio time, if it's less than 20 minutes, keep it at 20
If it's greater than user's available time, trim it to time available

max_heart_rate = 220 - user.age
